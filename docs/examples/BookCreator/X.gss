# X sudoku
<emptychar>0
<pattern>|.|
<standardblocks>
<updiagblock>
<downdiagblock>
<sudoku>
int[] f={|.|,|1|,|.|,|.|,|.|,|.|,|3|,|.|,|.|,|.|,|.|,|.|,|.|,|3|,|5|,|2|,|1|,|.|,|.|,|.|,|.|,|.|,|.|,|7|,|.|,|.|,|.|,|.|,|.|,|1|,|.|,|7|,|.|,|9|,|2|,|.|,|.|,|.|,|.|,|.|,|.|,|.|,|.|,|.|,|.|,|9|,|.|,|.|,|.|,|.|,|.|,|.|,|4|,|7|,|.|,|.|,|3|,|8|,|.|,|.|,|.|,|.|,|.|,|.|,|.|,|4|,|.|,|.|,|1|,|.|,|5|,|.|,|.|,|.|,|.|,|.|,|4|,|.|,|.|,|.|,|.|};
size(9cm);
int n = 3;
int N = n*n;
path cell = box((0,0),(1,1));
path supercell = box((0,0),(n,n));
for (int i=0;i<9;++i) {
	fill(shift(i, i)*cell, mediumgrey);
	fill(shift(i, N-i-1)*cell, mediumgrey);
}
int k=0;
for (int i = 0; i < N; ++i) {
	for (int j = 0; j < N; ++j) {
		draw(shift(i, j)*cell, black+linewidth(0.5pt));
		if (f[k]>0)
			label(string(f[k]),p = fontsize(20pt), (i+0.5,j+0.5));
		k=k+1;
	}
}
for (int i = 0; i < n; ++i) {
	for (int j = 0; j < n; ++j) {
		draw(shift(n*i, n*j)*supercell, black+linewidth(2pt));
	}
}

